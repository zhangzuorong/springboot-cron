#============================================================================
# 配置 Scheduler Properties
#org.quartz.scheduler.instanceName  程序名
#org.quartz.scheduler.instanceId 程序id 必须唯一
#org.quartz.threadPool.class 是要使用的ThreadPool实现的名称。Quartz附带的线程池是“org.quartz.simpl.SimpleThreadPool
#org.quartz.threadPool.threadCount 线程数 可用于并发执行作业的线程数
#org.quartz.threadPool.threadPriority  现成优先级 1-10
#org.quartz.jobStore.misfireThreshold 在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
#org.quartz.jobStore.class  JobStoreTX通过在每次操作（如添加jobs）后调用数据库连接上的commit（）（或rollback（））来管理所有事务。如果在独立应用程序中使用Quartz，或者在应用程序不使用JTA事务的情况下，则在Servlet容器中使用JDBCJobStore。 通过设置“org.quartz.jobStore.class”属性来选择JobStoreTX：
#org.quartz.jobStore.isClustered ture 开启集群功能
#org.quartz.jobStore.dataSource 和dataSource的配置相同
#org.quartz.jobStore.tablePrefix 数据库表前缀
#org.quartz.jobStore.clusterCheckinInterval 设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
#============================================================================

org.quartz.scheduler.instanceName = DOLPHIN
org.quartz.scheduler.instanceId = AUTO

#============================================================================
# Configure ThreadPool
#============================================================================

org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 25
org.quartz.threadPool.threadPriority = 5

#============================================================================
# Configure RAMJobStore
#============================================================================
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore